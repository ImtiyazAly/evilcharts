{
  "name": "animated-clipped-radar-chart",
  "type": "registry:ui",
  "registryDependencies": [
    "chart"
  ],
  "dependencies": [
    "recharts",
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "animated-clipped-radar-chart.tsx",
      "content": "\"use client\";\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from \"recharts\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/components/ui/chart\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingDown } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { useSpring, useMotionValueEvent } from \"motion/react\";\n\nconst chartData = [\n  { month: \"January\", desktop: 186 },\n  { month: \"February\", desktop: 305 },\n  { month: \"March\", desktop: 237 },\n  { month: \"April\", desktop: 273 },\n  { month: \"May\", desktop: 209 },\n  { month: \"June\", desktop: 214 },\n];\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"#FCA070\",\n  },\n} satisfies ChartConfig;\n\nexport function AnimatedClippedRadarChart() {\n  const [currentAngle, setCurrentAngle] = useState(0);\n  const [hoveredValue, setHoveredValue] = useState(0);\n  const [hasAnimated, setHasAnimated] = useState(false);\n\n  const springAngle = useSpring(0, { damping: 30, stiffness: 100 });\n  const springValue = useSpring(0, { damping: 30, stiffness: 100 });\n\n  useMotionValueEvent(springAngle, \"change\", setCurrentAngle);\n  useMotionValueEvent(springValue, \"change\", setHoveredValue);\n\n  useEffect(() => {\n    if (!hasAnimated) {\n      springAngle.set(360);\n          springValue.set(chartData[chartData.length - 1].desktop);\n      setHasAnimated(true);\n    }\n  }, [hasAnimated, springAngle, springValue]);\n \n  const centerX = 125;\n  const centerY = 125;\n  const radius = 120;\n  const rad = (currentAngle - 90) * (Math.PI / 180);\n  const x = centerX + radius * Math.cos(rad);\n  const y = centerY + radius * Math.sin(rad);\n\n  return (\n    <Card>\n      <CardHeader className=\"items-center pb-4\">\n        <CardTitle>\n          {Math.round(hoveredValue)}\n          <Badge variant=\"secondary\" className=\"ml-2\">\n            <TrendingDown className=\"h-4 w-4\" />\n            <span>-5.2%</span>\n          </Badge>\n        </CardTitle>\n        <CardDescription>\n          Animated clipped radar chart - Total visitors for the last 6 months\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"pb-0\">\n        <ChartContainer\n          config={chartConfig}\n          className=\"mx-auto aspect-square max-h-[250px]\"\n        >\n          <RadarChart\n            width={250}\n            height={250}\n            data={chartData}\n            onMouseMove={(state) => {\n              if (state.activePayload && state.activePayload[0]) {\n                const v = state.activePayload[0].value;\n                const idx = state.activeTooltipIndex || 0;\n                const a = (idx * 360) / chartData.length;\n                springAngle.set(a);\n                springValue.set(v);\n              }\n            }}\n            onMouseLeave={() => {\n              springAngle.set(360);\n              springValue.set(chartData[chartData.length - 1].desktop);\n            }}\n          >\n            <ChartTooltip cursor={false} content={<ChartTooltipContent />} />\n            <PolarAngleAxis dataKey=\"month\" />\n            <PolarGrid strokeDasharray=\"3 3\" />\n\n            <defs>\n                <clipPath id=\"clipped-sector\">\n                {currentAngle >= 360 ? (\n                  <circle cx={centerX} cy={centerY} r={radius} fill=\"white\" />\n                ) : (\n                  <path\n                    d={`\n                      M ${centerX} ${centerY}\n                      L ${centerX} ${centerY - radius}\n                      A ${radius} ${radius} 0 ${\n                        currentAngle > 180 ? 1 : 0\n                      } 1 ${x} ${y}\n                      Z\n                    `}\n                    fill=\"white\"\n                  />\n                )}\n              </clipPath>\n\n              <linearGradient\n                id=\"gradient-clipped-radar-desktop\"\n                x1=\"0\"\n                y1=\"0\"\n                x2=\"0\"\n                y2=\"1\"\n              >\n                <stop\n                  offset=\"5%\"\n                  stopColor={chartConfig.desktop.color}\n                  stopOpacity={0.3}\n                />\n                <stop\n                  offset=\"95%\"\n                  stopColor={chartConfig.desktop.color}\n                  stopOpacity={0.1}\n                />\n              </linearGradient>\n            </defs>\n                \n            <Radar\n              dataKey=\"desktop\"\n              stroke={chartConfig.desktop.color}\n              fill=\"url(#gradient-clipped-radar-desktop)\"\n              fillOpacity={0.4}\n              clipPath=\"url(#clipped-sector)\"\n            />\n            \n          </RadarChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
} 